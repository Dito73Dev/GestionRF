<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_aldevindiv_sol_sign_b  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeMoveNextList"]=true;



		$this->events["AfterEdit"]=true;

		$this->events["BeforeEdit"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		// ocultar 

$pageObject->hideItem("grid_checkbox", $recordId);

// update status

$sql = DB::PrepareSQL("UPDATE aldevindiv_sol 
SET aldevindiv_sol.sol_estado = 2 
WHERE
	aldevindiv_sol.sign_a_hash_v IS NOT NULL 
	AND aldevindiv_sol.sign_b_hash_v IS NOT NULL;");
DB::Exec( $sql );


// disable buttons

IF($data['sign_b_hash_v'] == ""){
$pageObject->showItem("grid_edit", $recordId);
$pageObject->hideItem("signed_button", $recordId);
$pageObject->hideItem("grid_checkbox_head", $recordId); 
}
else{
$pageObject->ShowItem("signed_button", $recordId);
$pageObject->hideItem("grid_checkbox_head", $recordId); 
$pageObject->hideItem("grid_edit", $recordId);
$pageObject->hideItem("grid_alldetails_link", $recordId);
$pageObject->hideItem("grid_details_link", $recordId);  
}



// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// After record updated
function AfterEdit(&$values, $where, &$oldvalues, &$keys, $inline, $pageObject)
{

		
//**********  Send email with new data  ************

$email=$values['sign_b_email'];
$from=$_SESSION['serversmtp'];
$msg="<h2>¡Documento Firmado!</h2>
  
  <p>Estimado usuario,</p>
  
<p>Este es para certificar que el siguiente documento ha sido firmado electrónicamente por:<br>
   <span class='signature'>".$values['sign_b_email']."</span>
    </p>
    <p class='timestamp'>Fecha y Hora de Firma: ".$values['sign_b_hash_v_date']."</p>
    <p class='first-signature'>Esta es la segunda firma electrónica de este documento.</p>
  
  <p>Si tienes alguna pregunta o necesitas ayuda, no dudes en ponerte en contacto con nuestro equipo de soporte.</p>
  
  <p>¡Gracias por utilizar nuestra plataforma de firma electrónica!</p>
  
  <p>Saludos,</p>
  
  <p>".$_SESSION['GEntidad']."</p>

  <img src='[URL_DEL_LOGO]' alt='Logo de [Nombre de la empresa]'>";
$subject="Módulo de inventario | Firmar documento";

$ret=runner_mail(array('to' => $email, 'subject' => $subject, 'htmlbody' => $msg, 'from'=>$from));
if(!$ret["mailed"])
	echo $ret["message"];

// firma 2


$emailb=$values['sign_a_email'];
$fromb=$_SESSION['serversmtp'];
$msgb="<h2>¡Documento Firmado!</h2>
  
  <p>Estimado usuario,</p>
  
<p>Este es para certificar que el siguiente documento ha sido firmado electrónicamente por:<br>
   <span class='signature'>".$values['sign_b_email']."</span>
    </p>
    <p class='timestamp'>Fecha y Hora de Firma: ".$values['sign_b_hash_v_date']."</p>
    <p class='first-signature'>Esta es la segunda firma electrónica de este documento.</p>
  
  <p>Recuerde que debe firmar este mismo documento para formalizar las transacción</br>Si tienes alguna pregunta o necesitas ayuda, no dudes en ponerte en contacto con nuestro equipo de soporte.</p>
  
  <p>¡Gracias por utilizar nuestra plataforma de firma electrónica!</p>
  
  <p>Saludos,</p>
  
  <p>".$_SESSION['GEntidad']."</p>

  <img src='[URL_DEL_LOGO]' alt='Logo de [Nombre de la empresa]'>";
$subjectb="Módulo de inventario | Segunda firma Radicado No.".$values['sol_rad'];

$retb=runner_mail(array('to' => $emailb, 'subject' => $subjectb, 'htmlbody' => $msgb, 'from'=>$fromb));
if(!$retb["mailed"])
	echo $retb["message"];



// update status

$sql = DB::PrepareSQL("UPDATE aldevindiv_sol 
SET aldevindiv_sol.sol_estado = 2 
WHERE
	aldevindiv_sol.sign_a_hash_v IS NOT NULL 
	AND aldevindiv_sol.sign_b_hash_v IS NOT NULL;");
DB::Exec( $sql );







  











// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function AfterEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		$return = true;
if($values['sign_b_hash_v'] != $values['sign_b_hash']){
$message = "La clave dinámica suministrada no es válida para el presente documento, por favor intente nuevamente";
$return = false;
}

// Place event code here.
// Use "Add Action" button to add code snippets.

return $return;

;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
